{"version":3,"sources":["store/action.types.js","store/reducers/index.reducer.js","store/reducers/addData.reducer.js","store/reducers/featchData.reducer.js","store/api.interface.js","store/actions/addData.action.js","store/sagas/addData.saga.js","store/actions/fetchData.action.js","store/sagas/fetchData.saga.js","store/sagas/index.saga.js","store/index.store.js","components/dataAdd.form.js","App.js","root/index.js","serviceWorker.js","index.js"],"names":["ADD_DATA","FETCH_DATA","index_reducer","addData","state","arguments","length","undefined","_ref","type","values","error","fetchData","apiInterface","axios","create","baseURL","addDataSuccess","onaddData","data","_data","regenerator_default","a","wrap","_context","prev","next","post","sent","console","log","put","t0","stop","_marked","this","fetchDataSuccess","onfetchData","alert","get","fetchData_saga_marked","sagas","all","takeLatest","index_saga_marked","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","REDUCERS","combineReducers","reducers","SAGA","createSagaMiddleware","configureStore","initialState","STORE","createStore","applyMiddleware","run","AddData","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","title","event","setState","target","value","desc","popState","dataAdd","bind","assertThisInitialized","$addData","react_default","createElement","className","name","onChange","onClick","Component","connect","_addData","dispatchEvent","$fetchData","App","dataAdd_form","Index","BrowserRouter_default","es","store","src_App_0","Boolean","location","hostname","match","ReactDOM","render","root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28eb7676.chunk.js","sourcesContent":["export const ADD_DATA = \"ADD_DATA\";\nexport const ADD_DATA_SUCCESS = \"ADD_DATA_SUCCESS\";\n\nexport const FETCH_DATA = \"FETCH_DATA\";\nexport const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\n","import addData from \"./addData.reducer\";\nimport fetchData from \"./featchData.reducer\";\nexport default {\n    addData,\n    fetchData\n};\n","import { ADD_DATA_SUCCESS } from \"../action.types\";\n\nconst initState = null;\n\nconst reducers = (state = initState, { type, values, error }) => {\n    switch (type) {\n        case ADD_DATA_SUCCESS:\n            return values;\n        default:\n            return state;\n    }\n};\n\nexport default reducers;\n","import { FETCH_DATA_SUCCESS } from \"../action.types\";\n\nconst initState = null;\n\nconst reducers = (state = initState, { type, values, error }) => {\n    switch (type) {\n        case FETCH_DATA_SUCCESS:\n            return values;\n        default:\n            return state;\n    }\n};\n\nexport default reducers;\n","import axios from \"axios\";\n\nconst apiInterface = axios.create({\n    baseURL: \"/api\"\n});\n\nexport default apiInterface;\n\n\n// netision tech.","import { ADD_DATA, ADD_DATA_SUCCESS } from \"../action.types\";\n\nexport const addData = values => ({\n    type: ADD_DATA,\n    values\n});\nexport const addDataSuccess = values => ({\n    type: ADD_DATA_SUCCESS,\n    values\n});\n","import { put } from \"redux-saga/effects\";\n\nimport axios from \"../api.interface\";\nimport { addDataSuccess } from \"../actions/addData.action\";\n\nexport function* onaddData(data) {\n    let values = data.values;\n\n    try {\n        const data = yield axios.post(\n            \"http://localhost:1234/addData\",\n            values\n        );\n        console.log(\"data\", data);\n        yield put(addDataSuccess(data));\n    } catch (error) {\n        throw error;\n    }\n}\n","import { FETCH_DATA, FETCH_DATA_SUCCESS } from \"../action.types\";\n\nexport const fetchData = () => ({\n    type: FETCH_DATA\n});\nexport const fetchDataSuccess = values => ({\n    type: FETCH_DATA_SUCCESS,\n    values\n});\n","import { put } from \"redux-saga/effects\";\n\nimport axios from \"../api.interface\";\nimport { fetchDataSuccess } from \"../actions/fetchData.action\";\n\nexport function* onfetchData() {\n    alert();\n    try {\n        const data = yield axios.get(\"http://localhost:1234/fetchData\");\n        console.log(\"data\", data);\n        yield put(fetchDataSuccess(data.data));\n    } catch (error) {\n        throw error;\n    }\n}\n","import { takeLatest, all } from \"redux-saga/effects\";\n\nimport { ADD_DATA, FETCH_DATA } from \"../action.types\";\n\nimport { onaddData } from \"./addData.saga\";\nimport { onfetchData } from \"./fetchData.saga\";\nfunction* sagas() {\n    yield all([takeLatest(ADD_DATA, onaddData)]);\n    yield all([takeLatest(FETCH_DATA, onfetchData)]);\n}\n\nexport default sagas;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducers from \"./reducers/index.reducer\";\nimport sagas from \"./sagas/index.saga\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst REDUCERS = combineReducers(reducers);\n\nconst SAGA = createSagaMiddleware();\n\nexport default function configureStore(initialState = {}) {\n    const STORE = createStore(\n        REDUCERS,\n        initialState,\n        composeEnhancers(applyMiddleware(SAGA))\n    );\n\n    // Running Sagas\n    SAGA.run(sagas);\n\n    if (module.hot && process.env.NODE_ENV === \"development\") {\n        // Enable Webpack hot module replacement for reducers\n        module.hot.accept(\"./reducers/index.reducer\", () => {\n            const nextRootReducer = require(\"./reducers/index.reducer\");\n            STORE.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return STORE;\n}\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../App.css\";\nimport { addData, fetchData } from \"../store/actions/index.action\";\nclass AddData extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            popState: false,\n            title: \"\",\n            desc: \"\"\n        };\n        this.dataAdd = this.dataAdd.bind(this);\n    }\n    title = event => {\n        this.setState({\n            title: event.target.value\n        });\n    };\n    desc = event => {\n        this.setState({\n            desc: event.target.value\n        });\n    };\n    dataAdd() {\n        this.props.$addData({ title: this.state.title, desc: this.state.desc });\n    }\n    componentDidMount() {\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"title\">\n                    <h1>Crud operation</h1>\n\n                    <label>\n                        title:\n                        <input\n                            name=\"title\"\n                            type=\"text\"\n                            value={this.state.title}\n                            onChange={this.title}\n                        />\n                    </label>\n                    <label>\n                        Desc\n                        <input\n                            name=\"desc\"\n                            type=\"text\"\n                            value={this.state.desc}\n                            onChange={this.desc}\n                        />\n                    </label>\n                    <button onClick={this.dataAdd}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapState = ({ addData }) => {\n    return {\n        _addData: addData\n    };\n};\nconst mapDispatch = dispatchEvent => ({\n    $addData: values => dispatchEvent(addData(values)),\n    $fetchData: () => dispatchEvent(fetchData())\n});\n\nexport default connect(\n    mapState,\n    mapDispatch\n)(AddData);\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport AddData from \"./components/dataAdd.form\";\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        return (\n            <div>\n                <AddData />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport BrowserRouter from \"react-router-dom/BrowserRouter\";\nimport { Provider } from \"react-redux\";\nimport store from \"../store/index.store\";\nimport App from \"../App\";\nclass Index extends Component {\n    state = {};\n    render() {\n        return (\n            <BrowserRouter>\n                <Provider store={store()}>\n                    <App />\n                </Provider>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Index from \"./root/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}